# https://developer.spotify.com/documentation/web-api

import requests
import secrets, hashlib
from settings import API_KEY, CLIENT_SECRET

def pkce_verification() -> (bytes, str):
    '''Generate a random string & challenge for PKCE verification.'''
    # Use the secrets module to get a 40 byte long string
    code_verifier = secrets.token_urlsafe(40)
    # Create PKCE code challenge by hashing the code verifier
    code_challenge = hashlib.sha256(code_verifier.encode("utf-8")).digest()

    return (code_challenge, code_verifier)


def request_login(code_challenge: bytes, redirect_uri: str, scope: str):
    '''
    Request a user's Spotify login.

    `code_challenge`: bytes generated by `pkce_verification`.
    `redirect_uri`: where Spotify will redirect after login is complete.
    `scope`: Spotify API space separated list of scopes for account access.

    Function returns nothing, but the request will redirect to the specified URI with a `code` and `state` query parameter in the url.
    `error` will be a query parameter in the url if authorization failed.
    '''
    payload = {
        "client_id": CLIENT_SECRET,
        "response_type": "code",
        "redirect_uri": redirect_uri,
        "scope": scope,
        "code_challenge_method": "S256",
        "code_challenge": code_challenge
    }
    # Make a request to the Spotify API
    try:
        auth_response = requests.post("https://accounts.spotify.com/authorize", params=payload)
    except requests.exceptions.RequestException as e:
        raise e


def request_access_token(auth_code: str, redirect_uri: str, code_verifier: str) -> dict:
    '''
    Get an access token from the Spotify API that can be used in requests downstream.

    `auth_code`: returned as a query parameter in the callback url from `request_login`.
    `redirect_uri`: must match the `redirect_uri` passed to `request_login`.
    `code_verifier`: generated by `pkce_verification`. Must match the current `code_challenge`.

    Returns the json results of the access token query.
    '''
    payload = {
        "grant_type": "authorization_code",
        "code": auth_code,
        "redirect_uri": redirect_uri,
        "client_id": CLIENT_SECRET,
        "code_verifier": code_verifier
    }
    header = {
        "Content-Type": "application/x-www-form-urlencoded"
    }
    url = "https://accounts.spotify.com/api/token"

    try:
        response = requests.post(url, headers=header, params=payload)
        # Raise any HTTPExceptions encountered
        response.raise_for_status()
        # Continue if status code is value (no exception raised)
        return response.json()
    except requests.exceptions.RequestException as e:
        raise e
    