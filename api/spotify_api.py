# https://developer.spotify.com/documentation/web-api

import requests, secrets, hashlib, random, base64
from flask import session, redirect
from functools import wraps

SPOTIFY_URL = "https://api.spotify.com/v1"

def spotify_login_required(f):
    """
    Decorate routes to require login.

    https://flask.palletsprojects.com/en/latest/patterns/viewdecorators/
    """

    @wraps(f)
    def decorated_function(*args, **kwargs):
        if session.get("token") is None:
            return redirect("/spotify_login")
        return f(*args, **kwargs)

    return decorated_function


def generate_code_challenge():
    '''Generate PKCE code challenge for OAuth'''
    code_verifier = secrets.token_urlsafe(random.randint(33, 96))
    # Create PKCE code challenge by hashing the code verifier
    code_challenge = base64.urlsafe_b64encode(hashlib.sha256(code_verifier.encode("utf-8")).digest()).decode('utf-8')
    code_challenge = code_challenge.replace("=", "")
    return code_verifier, code_challenge


def request_login(state: str, code_challenge: bytes, redirect_uri: str, scope: str, client_id: str):
    '''
    Request a user's Spotify login.

    `code_challenge`: bytes generated by `pkce_verification`.
    `redirect_uri`: where Spotify will redirect after login is complete.
    `scope`: Spotify API space separated list of scopes for account access.
    `client_id`: Spotify Developer client id.

    Function returns nothing, but the request will redirect to the specified URI with a `code` and `state` query parameter in the url.
    `error` will be a query parameter in the url if authorization failed.
    '''
    payload = {
        "state": state,
        "client_id": client_id,
        "response_type": "code",
        "redirect_uri": redirect_uri,
        "scope": scope,
        "code_challenge_method": "S256",
        "code_challenge": code_challenge
    }
    # Make a request to the Spotify API
    try:
        auth_response = requests.get("https://accounts.spotify.com/authorize", params=payload)
        return auth_response
    except requests.exceptions.RequestException as e:
        raise e


def request_access_token(auth_code: str, redirect_uri: str, code_verifier: str, client_id: str) -> dict:
    '''
    Get an access token from the Spotify API that can be used in requests downstream.

    `auth_code`: returned as a query parameter in the callback url from `request_login`.
    `redirect_uri`: must match the `redirect_uri` passed to `request_login`.
    `code_verifier`: generated by `pkce_verification`. Must match the current `code_challenge`.
    `client_id`: Spotify Developer client id.

    Returns the json results of the access token query.
    '''
    payload = {
        "grant_type": "authorization_code",
        "code": auth_code,
        "redirect_uri": redirect_uri,
        "client_id": client_id,
        "code_verifier": code_verifier
    }
    headers = {
        "Content-Type": "application/x-www-form-urlencoded"
    }
    url = "https://accounts.spotify.com/api/token"

    response = requests.post(url, headers=headers, data=payload)
    # Raise any HTTPExceptions encountered
    response.raise_for_status()
    # Continue if status code is valid (no exception raised)
    return response.json()
    

def get_user_info(access_token: str) -> dict:
    '''Make a request to the Spotify API for the user info.'''

    url = SPOTIFY_URL + "/me"
    headers = {
        "Authorization": "Bearer " + access_token
    }

    response = requests.get(url, headers=headers)
    # Raise any HTTPExceptions encountered
    response.raise_for_status()
    # Continue if status code is valid (no exception raised)
    return response.json()


def get_top_items(access_token: str, type: str, time_range: str, limit: int = 10):
    '''
    Get the current user's top n items over the given time_range
    `access_token`: current user's access token
    `type`: return either top `artists` or `tracks`
    `time_range`: Spotify enforced time ranges. One of `[long_term, medium_term, short_term]`
    `limit`: limit of top items to return, defaults to `10`
    '''
    url = SPOTIFY_URL + "/me/top/" + type

    params = {
        "time_range": time_range,
        "limit": limit
    }
    headers = {"Authorization": "Bearer " + access_token}

    response = requests.get(url, headers=headers, params=params)
    response.raise_for_status()
    return response.json()